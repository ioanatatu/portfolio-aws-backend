# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
#
# For full config options, check the docs:
#    docs.serverless.com

service: portfolio-aws-sls

provider:
    name: aws
    runtime: nodejs12.x
    profile: portfolioSlsUser
    region: eu-west-1
    apiGateway:
        shouldStartNameWithService: true
    environment:
        PROJECTS_TABLE_NAME: ${self:custom.tableName}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource: "*"

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here

# you can add packaging information here
package:
    individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
    getProjects:
        handler: lambdas/endpoints/getProjects.handler
        events:
            - http:
                  path: /projects
                  method: GET
                  cors: true
    createProject:
        handler: lambdas/endpoints/createProject.handler
        events:
            - http:
                  path: /project
                  method: POST
                  cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

# you can add CloudFormation resource templates here
resources:
    Resources:
        DemoBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: test-this-bucket-1836812638
        ProjectsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
plugins:
    - serverless-s3-sync
    - serverless-webpack

custom:
    tableName: projects-table
    s3Sync:
        - bucketName: test-this-bucket-1836812638
          localDir: TestUpload
