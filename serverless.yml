# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
#
# For full config options, check the docs:
#    docs.serverless.com

service: portfolio-aws-sls

provider:
    name: aws
    runtime: nodejs12.x
    profile: portfolioSlsUser
    region: eu-west-1
    apiGateway:
        shouldStartNameWithService: true
    environment:
        PROJECTS_TABLE_NAME: ${self:custom.tableName}
        IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}
        REGION: ${self:provider.region}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
              - s3:*
          Resource: "*"

plugins:
    - serverless-s3-sync
    - serverless-webpack

package:
    individually: true

custom:
    tableName: projects-table
    imagesBucketName: portfolio-images-bucket-hsjgh346
    s3Sync:
        - bucketName: test-this-bucket-20201224
          localDir: TestUpload

functions:
    getProjects:
        handler: lambdas/endpoints/getProjects.handler
        events:
            - http:
                  path: /projects
                  method: GET
                  cors: true
    createProject:
        handler: lambdas/endpoints/createProject.handler
        events:
            - http:
                  path: /project
                  method: POST
                  cors: true
    createProjectTest:
        handler: lambdas/endpoints/createProjectTest.handler
        events:
            - http:
                  path: /projectTest
                  method: POST
                  cors: true
    uploadImage:
        handler: lambdas/endpoints/uploadImage.handler
        events:
            - http:
                  path: /image
                  method: POST
                  cors: true

resources:
    Resources:
        DemoBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: test-this-bucket-20201224
        PortfolioImagesBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.imagesBucketName}
                AccessControl: PublicRead
        ProjectsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                    - AttributeName: title
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

                GlobalSecondaryIndexes:
                    - IndexName: title-index
                      KeySchema:
                          - AttributeName: title
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL

                    # add a global secondary index -> similar to id and we can query on that
                    # id must be unique, but global sec indexes not
